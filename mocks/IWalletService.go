// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entities "github.com/BarisKilicGsu/casino-wallet-service/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// IWalletService is an autogenerated mock type for the IWalletService type
type IWalletService struct {
	mock.Mock
}

// GetAllPlayers provides a mock function with no fields
func (_m *IWalletService) GetAllPlayers() ([]*entities.Player, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayers")
	}

	var r0 []*entities.Player
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Player, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Player); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Player)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlayerBalance provides a mock function with given fields: playerID
func (_m *IWalletService) GetPlayerBalance(playerID string) (*entities.Player, error) {
	ret := _m.Called(playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerBalance")
	}

	var r0 *entities.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Player, error)); ok {
		return rf(playerID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Player); ok {
		r0 = rf(playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessTransaction provides a mock function with given fields: transaction
func (_m *IWalletService) ProcessTransaction(transaction *entities.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIWalletService creates a new instance of IWalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWalletService {
	mock := &IWalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
