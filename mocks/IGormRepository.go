// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// IGormRepository is an autogenerated mock type for the IGormRepository type
type IGormRepository struct {
	mock.Mock
}

// CommitTransaction provides a mock function with given fields: tx
func (_m *IGormRepository) CommitTransaction(tx *gorm.DB) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishTransaction provides a mock function with given fields: tx, err
func (_m *IGormRepository) FinishTransaction(tx *gorm.DB, err error) error {
	ret := _m.Called(tx, err)

	if len(ret) == 0 {
		panic("no return value specified for FinishTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, error) error); ok {
		r0 = rf(tx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with no fields
func (_m *IGormRepository) GetDB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// RollbackTransaction provides a mock function with given fields: tx
func (_m *IGormRepository) RollbackTransaction(tx *gorm.DB) {
	_m.Called(tx)
}

// StartTransaction provides a mock function with no fields
func (_m *IGormRepository) StartTransaction() (*gorm.DB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartTransaction")
	}

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gorm.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTransactionWithIsolation provides a mock function with given fields: isolationLevel
func (_m *IGormRepository) StartTransactionWithIsolation(isolationLevel string) (*gorm.DB, error) {
	ret := _m.Called(isolationLevel)

	if len(ret) == 0 {
		panic("no return value specified for StartTransactionWithIsolation")
	}

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gorm.DB, error)); ok {
		return rf(isolationLevel)
	}
	if rf, ok := ret.Get(0).(func(string) *gorm.DB); ok {
		r0 = rf(isolationLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(isolationLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGormRepository creates a new instance of IGormRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGormRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGormRepository {
	mock := &IGormRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
