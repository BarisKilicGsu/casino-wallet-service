// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entities "github.com/BarisKilicGsu/casino-wallet-service/internal/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// IPlayerRepository is an autogenerated mock type for the IPlayerRepository type
type IPlayerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: player, outTx
func (_m *IPlayerRepository) Create(player *entities.Player, outTx *gorm.DB) error {
	ret := _m.Called(player, outTx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Player, *gorm.DB) error); ok {
		r0 = rf(player, outTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: outTx
func (_m *IPlayerRepository) GetAll(outTx *gorm.DB) ([]*entities.Player, error) {
	ret := _m.Called(outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entities.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]*entities.Player, error)); ok {
		return rf(outTx)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []*entities.Player); ok {
		r0 = rf(outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id, outTx
func (_m *IPlayerRepository) GetByID(id string, outTx *gorm.DB) (*entities.Player, error) {
	ret := _m.Called(id, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) (*entities.Player, error)); ok {
		return rf(id, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *entities.Player); ok {
		r0 = rf(id, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(id, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDWithLock provides a mock function with given fields: id, outTx
func (_m *IPlayerRepository) GetByIDWithLock(id string, outTx *gorm.DB) (*entities.Player, error) {
	ret := _m.Called(id, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithLock")
	}

	var r0 *entities.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) (*entities.Player, error)); ok {
		return rf(id, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *entities.Player); ok {
		r0 = rf(id, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(id, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: id, amount, outTx
func (_m *IPlayerRepository) UpdateBalance(id string, amount float64, outTx *gorm.DB) error {
	ret := _m.Called(id, amount, outTx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, *gorm.DB) error); ok {
		r0 = rf(id, amount, outTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPlayerRepository creates a new instance of IPlayerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPlayerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPlayerRepository {
	mock := &IPlayerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
