// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entities "github.com/BarisKilicGsu/casino-wallet-service/internal/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ITransactionRepository is an autogenerated mock type for the ITransactionRepository type
type ITransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: transaction, outTx
func (_m *ITransactionRepository) Create(transaction *entities.Transaction, outTx *gorm.DB) error {
	ret := _m.Called(transaction, outTx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction, *gorm.DB) error); ok {
		r0 = rf(transaction, outTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByPlayerID provides a mock function with given fields: playerID, outTx
func (_m *ITransactionRepository) GetByPlayerID(playerID string, outTx *gorm.DB) ([]*entities.Transaction, error) {
	ret := _m.Called(playerID, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByPlayerID")
	}

	var r0 []*entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) ([]*entities.Transaction, error)); ok {
		return rf(playerID, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) []*entities.Transaction); ok {
		r0 = rf(playerID, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(playerID, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReqID provides a mock function with given fields: reqID, outTx
func (_m *ITransactionRepository) GetByReqID(reqID string, outTx *gorm.DB) (*entities.Transaction, error) {
	ret := _m.Called(reqID, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByReqID")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) (*entities.Transaction, error)); ok {
		return rf(reqID, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *entities.Transaction); ok {
		r0 = rf(reqID, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(reqID, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReqIDAndRoundIDWithLock provides a mock function with given fields: reqID, roundID, outTx
func (_m *ITransactionRepository) GetByReqIDAndRoundIDWithLock(reqID string, roundID string, outTx *gorm.DB) (*entities.Transaction, error) {
	ret := _m.Called(reqID, roundID, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByReqIDAndRoundIDWithLock")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *gorm.DB) (*entities.Transaction, error)); ok {
		return rf(reqID, roundID, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, string, *gorm.DB) *entities.Transaction); ok {
		r0 = rf(reqID, roundID, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *gorm.DB) error); ok {
		r1 = rf(reqID, roundID, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReqIDWithLock provides a mock function with given fields: reqID, outTx
func (_m *ITransactionRepository) GetByReqIDWithLock(reqID string, outTx *gorm.DB) (*entities.Transaction, error) {
	ret := _m.Called(reqID, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByReqIDWithLock")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) (*entities.Transaction, error)); ok {
		return rf(reqID, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *entities.Transaction); ok {
		r0 = rf(reqID, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(reqID, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoundID provides a mock function with given fields: roundID, outTx
func (_m *ITransactionRepository) GetByRoundID(roundID string, outTx *gorm.DB) (*entities.Transaction, error) {
	ret := _m.Called(roundID, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByRoundID")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) (*entities.Transaction, error)); ok {
		return rf(roundID, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *entities.Transaction); ok {
		r0 = rf(roundID, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(roundID, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoundIDWithLock provides a mock function with given fields: roundID, transactionType, outTx
func (_m *ITransactionRepository) GetByRoundIDWithLock(roundID string, transactionType entities.TransactionType, outTx *gorm.DB) (*entities.Transaction, error) {
	ret := _m.Called(roundID, transactionType, outTx)

	if len(ret) == 0 {
		panic("no return value specified for GetByRoundIDWithLock")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, entities.TransactionType, *gorm.DB) (*entities.Transaction, error)); ok {
		return rf(roundID, transactionType, outTx)
	}
	if rf, ok := ret.Get(0).(func(string, entities.TransactionType, *gorm.DB) *entities.Transaction); ok {
		r0 = rf(roundID, transactionType, outTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, entities.TransactionType, *gorm.DB) error); ok {
		r1 = rf(roundID, transactionType, outTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITransactionRepository creates a new instance of ITransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionRepository {
	mock := &ITransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
