// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthResponse health response
//
// swagger:model HealthResponse
type HealthResponse struct {

	// VeritabanÄ± durumu
	// Enum: [ok error]
	Database string `json:"database,omitempty"`

	// Servis durumu
	// Enum: [ok error]
	Status string `json:"status,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this health response
func (m *HealthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var healthResponseTypeDatabasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthResponseTypeDatabasePropEnum = append(healthResponseTypeDatabasePropEnum, v)
	}
}

const (

	// HealthResponseDatabaseOk captures enum value "ok"
	HealthResponseDatabaseOk string = "ok"

	// HealthResponseDatabaseError captures enum value "error"
	HealthResponseDatabaseError string = "error"
)

// prop value enum
func (m *HealthResponse) validateDatabaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthResponseTypeDatabasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthResponse) validateDatabase(formats strfmt.Registry) error {
	if swag.IsZero(m.Database) { // not required
		return nil
	}

	// value enum
	if err := m.validateDatabaseEnum("database", "body", m.Database); err != nil {
		return err
	}

	return nil
}

var healthResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthResponseTypeStatusPropEnum = append(healthResponseTypeStatusPropEnum, v)
	}
}

const (

	// HealthResponseStatusOk captures enum value "ok"
	HealthResponseStatusOk string = "ok"

	// HealthResponseStatusError captures enum value "error"
	HealthResponseStatusError string = "error"
)

// prop value enum
func (m *HealthResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this health response based on context it is used
func (m *HealthResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthResponse) UnmarshalBinary(b []byte) error {
	var res HealthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
