// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventRequest event request
//
// swagger:model EventRequest
type EventRequest struct {

	// amount
	// Required: true
	// Minimum: 0
	Amount *float64 `json:"amount"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// game code
	// Required: true
	GameCode *string `json:"game_code"`

	// player id
	// Required: true
	PlayerID *string `json:"player_id"`

	// req id
	// Required: true
	ReqID *string `json:"req_id"`

	// round id
	// Required: true
	RoundID *string `json:"round_id"`

	// session id
	// Required: true
	SessionID *string `json:"session_id"`

	// type
	// Required: true
	// Enum: [bet result]
	Type *string `json:"type"`

	// wallet id
	// Required: true
	WalletID *string `json:"wallet_id"`
}

// Validate validates this event request
func (m *EventRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGameCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReqID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Minimum("amount", "body", *m.Amount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateGameCode(formats strfmt.Registry) error {

	if err := validate.Required("game_code", "body", m.GameCode); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validatePlayerID(formats strfmt.Registry) error {

	if err := validate.Required("player_id", "body", m.PlayerID); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateReqID(formats strfmt.Registry) error {

	if err := validate.Required("req_id", "body", m.ReqID); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateRoundID(formats strfmt.Registry) error {

	if err := validate.Required("round_id", "body", m.RoundID); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("session_id", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

var eventRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bet","result"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventRequestTypeTypePropEnum = append(eventRequestTypeTypePropEnum, v)
	}
}

const (

	// EventRequestTypeBet captures enum value "bet"
	EventRequestTypeBet string = "bet"

	// EventRequestTypeResult captures enum value "result"
	EventRequestTypeResult string = "result"
)

// prop value enum
func (m *EventRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *EventRequest) validateWalletID(formats strfmt.Registry) error {

	if err := validate.Required("wallet_id", "body", m.WalletID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event request based on context it is used
func (m *EventRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventRequest) UnmarshalBinary(b []byte) error {
	var res EventRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
